// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

// App Mixins

//mixin for container width
@import '../variables';

@mixin lineClamp($val: null) {
  display: -webkit-box;
  -webkit-line-clamp: $val;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

@mixin containerWidth($wdm: null, $mgm: auto) {
  margin: $mgm;
  width: $wdm;
  @content;
}

$spDefault: null;
// null it will not show at init until we proivdes value to param
@mixin spacing(
  $pdm: $spDefault,
  $mgm: $spDefault,
  $mbm: $spDefault,
  $mtm: $spDefault,
  $mlm: $spDefault,
  $mrm: $spDefault,
  $pbm: $spDefault,
  //mixin param
) {
  margin: $mgm;
  margin-bottom: $mbm;
  margin-left: $mlm;
  margin-right: $mrm;
  margin-top: $mtm;
  padding: $pdm;
  padding-bottom: $pbm;

  @content;
}

// Small devices
@mixin sm {
  @media (max-width: #{$screen-sm-max}) {
    @content;
  }
}

// Medium devices
@mixin md {
  @media (max-width: #{$screen-md-max}) {
    @content;
  }
}

// Large devices
@mixin lg {
  @media (max-width: #{$screen-lg-max}) {
    @content;
  }
}

// Extra large devices
@mixin xl {
  @media (max-width: #{$screen-xl-max}) {
    @content;
  }
}

// Custom devices
@mixin rwd($screen) {
  @media (max-width: $screen+'px') {
    @content;
  }
}

// usage
// @include md{
//   padding: 0 20px;
// }

//Function to convert px value into rem
//You can replace rem with any other value you want (rem is most preferred value for web)
// usage==> rem(1)
$base-size: 16;
@function rem($target, $context: $base-size) {
  @return ($target / $context) * 1rem;
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}
